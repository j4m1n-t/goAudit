package crud

import (
	// Standard Library
	"database/sql"
	"fmt"
	"log"
	"strconv"
	"time"
	// External Imports

	// Internal Imports
	serverSide "github.com/j4m1n-t/goAudit/goAuditServer/pkg"
)

// Set structures to be used for the program

// Note Structure


func InitDBCRM() error {
	SQLSettings := serverSide.LoadSQLSettings()
	userName := SQLSettings.User
	password := SQLSettings.Password
	dataBase := SQLSettings.Database //May need to be changed for specific applications
	var err error
	dbCRM, err = sql.Open("postgres", fmt.Sprintf("user=%s dbname=%s sslmode=disable password=%s", userName, dataBase, password))
	if err != nil {
		return err
	}
	if err = dbCRM.Ping(); err != nil {
		return err
	}
	log.Println("Database connection established")
	return nil
}



// CRM Section
// Create a new CRM in the database

func CreateCRM(name, created_at, user_id, string) (CRM, error) {
	crm :=CRM{Name: name, CreatedAt: created_at, UserID: user_id}
	query := `INSERT INTO crm (name, created_at, user_id) VALUES ($1, $2, $3) RETURNING id`
	result, err := dbCRM.Exec(query, "New CRM", time.Now(), 1)
	if err != nil {
		return err
	}

	id, _ := result.LastInsertId()
	fmt.Println("New CRM created with ID:", id)
	return nil
}

// Get all CRMs from the database for a given user
func GetCRMs(db *sql.DB, userID int) ([]CRM, error) {
	rows, err := dbCRM.Query("SELECT id, name, created_at, user_id FROM crm WHERE user_id = $1", userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var crm []CRM
	for rows.Next() {
		var c CRM
		err := rows.Scan(&c.ID, &c.Name, &c.CreatedAt, &c.UserID)
		if err != nil {
			return nil, err
		}
		crm = append(crm, c)
	}
	return crm, nil
}

// Get a specific CRM for the given user
func GetCRM(db *sql.DB, userID, crmID int) (*CRM, error) {
	row := dbCRM.QueryRow("SELECT id, name, created_at, user_id FROM crm WHERE user_id = $1 AND id = $2", userID, crmID)

	var c CRM
	err := row.Scan(&c.ID, &c.Name, &c.CreatedAt, &c.UserID)
	if err == sql.ErrNoRows {
		return nil, fmt.Errorf("CRM not found")
	} else if err != nil {
		return nil, err
	}
	return &c, nil
}

// Update a CRM in the database for the given user
func UpdateCRM(db *sql.DB, userID, crmID int, name string) error {
	_, err := dbCRM.Exec("UPDATE crm SET name=$1 WHERE user_id=$2 AND id=$3", name, userID, crmID)
	if err != nil {
		return err
	}
	fmt.Println("CRM updated")
	return nil
}

// Delete a CRM from the database for the given user
func DeleteCRM(db *sql.DB, userID, crmID int) error {
	_, err := dbCRM.Exec("DELETE FROM crm WHERE user_id=$1 AND id=$2", userID, crmID)
	if err != nil {
		return err
	}
	fmt.Println("CRM deleted")
	return nil
}
